{"version":3,"sources":["components/AccountsPage.js"],"names":["useStyles","makeStyles","theme","card","backgroundColor","palette","secondary","dark","color","overflow","position","content","width","height","background","borderRadius","top","right","breakpoints","down","opacity","padding","avatar","typography","commonAvatar","largeAvatar","marginTop","avatarRight","mediumAvatar","zIndex","cardHeading","fontSize","fontWeight","marginRight","marginBottom","subHeading","avatarCircle","cursor","smallAvatar","circleIcon","transform","menuItem","transLink","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","link","ApolloLink","from","withStyles","_ref","currentUser","wallet","selection","onSelection","data","setData","React","useState","daTable","setDaTable","columnsTwo","setColumnsTwo","anchorEl","setAnchorEl","isLoading","setLoading","selectionS","setSelectionS","pageModel","setPageModel","account","accountId","useEffect","fetch","concat","method","headers","then","response","json","console","log","parseInt","txns","count","dataTable","Set","forEach","node","add","receiver_account_id","v","oldArray","id","_jsxs","MainCard","title","children","_jsx","style","DataGrid","rows","columns","field","headerName","flex","pageSize","rowsPerPageOptions","checkboxSelection","loading","onSelectionModelChange","newSelectionModel","selectionModel","onPageChange","e","page","paginationMode","Button","component","Link","to","variant","endIcon","SendIcon","onClick","event"],"mappings":"4GAEA,mMA8BA,MAAMA,EAAYC,aAAYC,IAAK,CAC/BC,KAAM,CACFC,gBAAiBF,EAAMG,QAAQC,UAAUC,KACzCC,MAAO,OACPC,SAAU,SACVC,SAAU,WACV,UAAW,CACPC,QAAS,KACTD,SAAU,WACVE,MAAO,QACPC,OAAQ,QACRC,WAAYZ,EAAMG,QAAQC,UAAU,KACpCS,aAAc,MACdC,IAAK,QACLC,MAAO,QACP,CAACf,EAAMgB,YAAYC,KAAK,OAAQ,CAC5BH,IAAK,SACLC,MAAO,WAGf,WAAY,CACRN,QAAS,KACTD,SAAU,WACVE,MAAO,QACPC,OAAQ,QACRC,WAAYZ,EAAMG,QAAQC,UAAU,KACpCS,aAAc,MACdC,IAAK,SACLC,MAAO,QACPG,QAAS,GACT,CAAClB,EAAMgB,YAAYC,KAAK,OAAQ,CAC5BH,IAAK,SACLC,MAAO,WAInBN,QAAS,CACLU,QAAS,mBAEbC,OAAQ,IACDpB,EAAMqB,WAAWC,gBACjBtB,EAAMqB,WAAWE,YACpBrB,gBAAiBF,EAAMG,QAAQC,UAAU,KACzCoB,UAAW,OAEfC,YAAa,IACNzB,EAAMqB,WAAWC,gBACjBtB,EAAMqB,WAAWK,aACpBxB,gBAAiBF,EAAMG,QAAQC,UAAUC,KACzCC,MAAON,EAAMG,QAAQC,UAAU,KAC/BuB,OAAQ,GAEZC,YAAa,CACTC,SAAU,WACVC,WAAY,IACZC,YAAa,MACbP,UAAW,OACXQ,aAAc,OAElBC,WAAY,CACRJ,SAAU,OACVC,WAAY,IACZxB,MAAON,EAAMG,QAAQC,UAAU,MAEnC8B,aAAc,CACVC,OAAQ,aACLnC,EAAMqB,WAAWe,YACpBlC,gBAAiBF,EAAMG,QAAQC,UAAU,KACzCE,MAAON,EAAMG,QAAQC,UAAUC,MAEnCgC,WAAY,CACRC,UAAW,4BAEfC,SAAU,CACNR,YAAa,OACbF,SAAU,eAGZW,EAAY,IAAIC,IAAS,CAC7BC,IAAK,gEAEMC,EAAS,IAAIC,IAAa,CACrCC,MAAO,IAAIC,IACXC,KAAMC,IAAWC,KAAK,CAACT,MA4VVU,sBAAWpD,EAAXoD,EAzVd,SAAqBC,GAAmD,IAAlD,YAAEC,EAAW,OAAEC,EAAM,UAAEC,EAAS,YAAEC,GAAaJ,EAEpE,MAAOK,EAAMC,GAAWC,IAAMC,SAAS,CAAC,IACjCC,EAASC,GAAcH,IAAMC,SAAS,KACtCG,EAAYC,GAAiBL,IAAMC,SAAS,KAO5CK,EAAUC,GAAeP,IAAMC,SAAS,OACxCO,EAAWC,GAAcT,IAAMC,UAAS,IACxCS,EAAYC,GAAiBV,mBAAS,IAK7B7D,IAEhB,MAAOwE,EAAWC,GAAgBb,IAAMC,SAAS,GAE3Ca,EAAUpB,EAAYqB,UAW5B,OAAID,GASNE,qBAAW,KAWTP,GAAW,GACPQ,MAAM,wDAADC,OAAyDJ,GAAU,CACxEK,OAAQ,MACVC,QAAS,CACP,cAAiB,6CAElBC,MAAMC,GAAaA,EAASC,SAC1BF,MAAMvB,IACL0B,QAAQC,IAAI3B,GACC4B,SAAS5B,EAAK6B,KAAK,GAAGC,MAAQ,GAAI,IAC9CP,MAAK,KAEZJ,MAAM,kDAADC,OAAmDJ,EAAO,kCAAiC,CAC5FK,OAAQ,MACVC,QAAS,CACP,cAAiB,6CAalBC,MAAMC,GAAcA,EAASC,SAC3BF,MAAMvB,IAGLC,EAAQD,GACR,MAGA+B,EAAY,IAAIC,IAKtBhC,EAAK6B,KAAKI,SAAQC,IAChBH,EAAUI,IAAKD,EAAKE,oBAAoB,IAI1CL,EAAUE,SAAQI,GAAKhC,GAAWiC,GAAY,IAAIA,EAAU,CAACC,GAAIF,QAOjE1B,GAAW,EAAM,GAEf,GAEI,GACL,IAiHC6B,eAACC,IAAQ,CAACC,MAAM,WAAUC,SAAA,CAuCNC,cAAA,OAAKC,MAAO,CAAE1F,OAAQ,IAAKD,MAAO,QAASyF,SAEzCC,cAACE,IAAQ,CACLC,KAAM3C,EACN4C,QA7Od,CACZ,CAAEC,MAAO,KAAMC,WAAY,QAAQC,KAAM,IA6OfC,SAAU,GACVC,mBAAoB,CAAC,IAErBC,mBAAiB,EACjBC,QAAS7C,EAET8C,uBAAyBC,IAvPnD5C,EAwP4C4C,EAAkB,EAEpCC,eAAgB9C,EAChB+C,aAAeC,IA9HnBC,QA8H0CD,EA7HlEjD,GAAW,GAEXI,EAAa8C,GACZ1C,MAAM,kDAADC,OAAmDJ,EAAO,UAAAI,OAASyC,EAAI,2BAA0B,CACnGxC,OAAQ,MACVC,QAAS,CACP,cAAiB,6CAYZC,MAAMC,GAAaA,EAASC,SAChCF,MAAMvB,IAGLC,EAAQD,GACR,MAGA+B,EAAY,IAAIC,IAKtBhC,EAAK6B,KAAKI,SAAQC,IAChBH,EAAUI,IAAKD,EAAKE,oBAAoB,IAI1CL,EAAUE,SAAQI,GAAKhC,GAAWiC,GAAY,IAAIA,EAAU,CAACC,GAAIF,QASjE1B,GAAW,EAAM,GAgFmD,EACxCmD,eAAe,aAmBrBlB,cAACmB,IAAM,CAACC,UAAWC,IAAMC,GAAG,uBAAuBC,QAAQ,YAAYC,QAASxB,cAACyB,IAAQ,IAAKC,QAAUC,IAlR5HxE,EAAYa,EAkRyI,EAAA+B,SAAC,eAvQtJH,eAAA,OAAAG,SAAA,CACAC,cAAA,QAAAD,SAAM,gDACNC,cAAA,UACAA,cAACmB,IAAM,CAACI,QAAQ,YAAYC,QAASxB,cAACyB,IAAQ,IAAKL,UAAWC,IAAMC,GAAG,aAAYvB,SAAC,mCA6SxF,G","file":"static/js/4.78308019.chunk.js","sourcesContent":["\r\nimport PropTypes from 'prop-types';\r\nimport React, { useState,useEffect,useContext  } from 'react';\r\nimport { Avatar, Grid, Menu, MenuItem, Typography,Button  } from '@material-ui/core';\r\nimport MainCard from './ui-component/cards/MainCard';\r\nimport PictureAsPdfTwoToneIcon from '@material-ui/icons/PictureAsPdfOutlined';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport { AppContext } from \"components/layout/MainLayout\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { withStyles } from '@material-ui/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { gridSpacing } from './store/constant';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\n  import { GridToolbarContainer,\r\n    GridToolbarExport\r\n     } from '@material-ui/data-grid';\r\n\r\nimport {web3Accounts, web3Enable} from \"@polkadot/extension-dapp\";\r\nimport { HttpLink } from 'apollo-link-http';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { ApolloClient, ApolloLink, InMemoryCache,useQuery,useLazyQuery, gql } from \"@apollo/client\";\r\n\r\n\r\nimport {\r\n  InputBase,\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        backgroundColor: theme.palette.secondary.dark,\r\n        color: '#fff',\r\n        overflow: 'hidden',\r\n        position: 'relative',\r\n        '&:after': {\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            width: '210px',\r\n            height: '210px',\r\n            background: theme.palette.secondary[800],\r\n            borderRadius: '50%',\r\n            top: '-85px',\r\n            right: '-95px',\r\n            [theme.breakpoints.down('xs')]: {\r\n                top: '-105px',\r\n                right: '-140px'\r\n            }\r\n        },\r\n        '&:before': {\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            width: '210px',\r\n            height: '210px',\r\n            background: theme.palette.secondary[800],\r\n            borderRadius: '50%',\r\n            top: '-125px',\r\n            right: '-15px',\r\n            opacity: 0.5,\r\n            [theme.breakpoints.down('xs')]: {\r\n                top: '-155px',\r\n                right: '-70px'\r\n            }\r\n        }\r\n    },\r\n    content: {\r\n        padding: '20px !important'\r\n    },\r\n    avatar: {\r\n        ...theme.typography.commonAvatar,\r\n        ...theme.typography.largeAvatar,\r\n        backgroundColor: theme.palette.secondary[800],\r\n        marginTop: '8px'\r\n    },\r\n    avatarRight: {\r\n        ...theme.typography.commonAvatar,\r\n        ...theme.typography.mediumAvatar,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n        color: theme.palette.secondary[200],\r\n        zIndex: 1\r\n    },\r\n    cardHeading: {\r\n        fontSize: '2.125rem',\r\n        fontWeight: 500,\r\n        marginRight: '8px',\r\n        marginTop: '14px',\r\n        marginBottom: '6px'\r\n    },\r\n    subHeading: {\r\n        fontSize: '1rem',\r\n        fontWeight: 500,\r\n        color: theme.palette.secondary[200]\r\n    },\r\n    avatarCircle: {\r\n        cursor: 'pointer',\r\n        ...theme.typography.smallAvatar,\r\n        backgroundColor: theme.palette.secondary[200],\r\n        color: theme.palette.secondary.dark\r\n    },\r\n    circleIcon: {\r\n        transform: 'rotate3d(1, 1, 1, 45deg)'\r\n    },\r\n    menuItem: {\r\n        marginRight: '14px',\r\n        fontSize: '1.25rem'\r\n    }\r\n}));\r\nconst transLink = new HttpLink({\r\n  uri: \"https://api.subquery.network/sq/jamesbayly/transaction-list\",\r\n});\r\nexport const client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: ApolloLink.from([transLink]),\r\n});\r\n\r\n function AccountsPage({ currentUser, wallet, selection, onSelection }) {\r\n  // const [daTable, setDaTable] = React.useState([]);\r\n  const [data, setData] = React.useState({});\r\n  const [daTable, setDaTable] = React.useState([]);\r\n  const [columnsTwo, setColumnsTwo] = React.useState([]);\r\n  // const [paginationModel, setPaginationModel] = React.useState({\r\n  //   page: 0,\r\n  // });\r\n  // const [allAccounts, setAllAccounts] = useState([]);\r\n  // const [error, setError] = useState(null);\r\n  // const [isLoading, setLoading] = useState(true);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [isLoading, setLoading] = React.useState(true);\r\n  const [selectionS, setSelectionS] = useState([]);\r\n\r\n  // const selectionS = selection;\r\n  // const selectionS = selection;\r\n  // const setSelectionS = onSelection;\r\n  const classes = useStyles();\r\n  var totalCount = 0;\r\n  const [pageModel, setPageModel] = React.useState(1);\r\n\r\n  const account = currentUser.accountId; \r\n  const handleSubmit = () =>{\r\n    onSelection(selectionS);\r\n  }\r\n  const handleSelection = (e) =>{\r\n    setSelectionS(e);\r\n    // setSelection(e);\r\n  }\r\n  let columns = [\r\n    { field: 'id', headerName: 'TO ID',flex: 1 },\r\n  ];\r\n  if(!account) \r\n  return (\r\n    <div>\r\n    <span>No account found; Either connect via wallet</span>\r\n    <div></div>\r\n    <Button variant=\"contained\" endIcon={<SendIcon />} component={Link} to=\"/dashboard\">\r\n  Click to return to dashboard\r\n</Button></div>)\r\n\r\nuseEffect( () =>{\r\n\r\n  var from = \"sbv2-authority.testnet\";\r\n  var to = \"switchboard-v2.testnet\";\r\n   // {\r\n  //   \"txns\": [\r\n  //     {\r\n  //       \"count\": \"97\"\r\n  //     }\r\n  //   ]\r\n  // }\r\n  setLoading(true)\r\n      fetch(`https://api-testnet.nearblocks.io/v1/txns/count?from=${account}`,{\r\n      method: 'GET',\r\n    headers: {\r\n      'Authorization': 'Bearer 5CF714ACEE2E410D9C1C593CE0E09C21'\r\n    }\r\n  }).then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data)\r\n        totalCount = parseInt(data.txns[0].count , 10 );\r\n      }).then(() =>{\r\n\r\n  fetch(`https://api-testnet.nearblocks.io/v1/txns?from=${account}&page=1&per_page=15&order=desc`,{\r\n      method: 'GET',\r\n    headers: {\r\n      'Authorization': 'Bearer 5CF714ACEE2E410D9C1C593CE0E09C21',\r\n    }\r\n  // })  \r\n// })\r\n// \r\n  // const myHeaders = new Headers({\r\n  //   \"Content-Type\": \"application/json\",\r\n  //   Accept: \"application/json\"\r\n  // });\r\n\r\n  // fetch(\"http://localhost:3000/test.json\", {\r\n  //   headers: myHeaders,\r\n\r\n  }).then((response) =>  response.json())\r\n      .then((data) => {\r\n\r\n        //  setPosts(data);\r\n        setData(data);\r\n        const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  \r\n  const dataTable = new Set();\r\n  // data.transfers.nodes.forEach(node => {\r\n  //   dataTable.add({id: node.toId});\r\n  // })\r\n  // set unique to ids. \r\n  data.txns.forEach(node =>{\r\n    dataTable.add( node.receiver_account_id);\r\n  })\r\n  // dTable = dataTable;\r\n  const array = [];\r\n  dataTable.forEach(v => setDaTable(oldArray => [...oldArray, {id: v}]));\r\n  // setDaTable([...daTable,array]);\r\n  // console.log(daTable);\r\n  // dataTable.forEach(v => setDaTable([...daTable, {id: v}]))\r\n  // setDaTable(Array.from(dataTable));\r\n  // dataTable.forEach(dt => {\r\n  //   dTable.add(dt);\r\n  setLoading(false)\r\n\r\n  })\r\n\r\n      });\r\n}, [])\r\n     \r\n// const handleClick = (event) => {\r\n//     setAnchorEl(event.currentTarget);\r\n// };\r\nconst handleClick = async (event) => {\r\n  \r\n  // const { loading, data } = await fetchMore( {\r\n  //   variables: {toIds: selection} ,\r\n  // });\r\n  await fetch(`https://api-testnet.nearblocks.io/v1/txns?from=${selection}&page=1&per_page=25&order=desc`,{\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': 'Bearer 5CF714ACEE2E410D9C1C593CE0E09C21'\r\n    }\r\n  })\r\n      // .then((response) => response.json())\r\n      .then((data) => {\r\n        //  console.log(data);\r\n        //  setPosts(data);\r\n        // setData(data);\r\n        setDaTable(data.txns);\r\n\r\n\r\n      });\r\n\r\n  // dTable = data.transfers.nodes;\r\n  // setDaTable(data.transfers.nodes);\r\n  // const daTable = data.transfers.nodes\r\n\r\n  const columns2 = [\r\n    { field: 'toId', headerName: 'TO ID', width: 500},\r\n    { field: 'fromId', headerName: 'FROM ID', width: 500 },\r\n    { field: 'amount', headerName: 'AMOUNT', type: 'number',width: 300,valueFormatter: (params) => {\r\n      const valueFormatted = Number(params.value / Math.pow(10,10)).toLocaleString();\r\n      return `${valueFormatted}`;\r\n    }, },\r\n  ];\r\n  setColumnsTwo(columns2);\r\n\r\n};\r\nconst handlePageChange = (page)=>{\r\n  setLoading(true)\r\n\r\n  setPageModel(page);\r\n   fetch(`https://api-testnet.nearblocks.io/v1/txns?from=${account}&page=${page}&per_page=15&order=desc`,{\r\n      method: 'GET',\r\n    headers: {\r\n      'Authorization': 'Bearer 5CF714ACEE2E410D9C1C593CE0E09C21'\r\n    }\r\n  // })\r\n\r\n  // const myHeaders = new Headers({\r\n  //   \"Content-Type\": \"application/json\",\r\n  //   Accept: \"application/json\"\r\n  // });\r\n\r\n  // fetch(\"http://localhost:3000/test.json\", {\r\n  //   headers: myHeaders,\r\n\r\n  })      .then((response) => response.json())\r\n      .then((data) => {\r\n        //  console.log(data);\r\n        //  setPosts(data);\r\n        setData(data);\r\n        const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  \r\n  const dataTable = new Set();\r\n  // data.transfers.nodes.forEach(node => {\r\n  //   dataTable.add({id: node.toId});\r\n  // })\r\n  // set unique to ids. \r\n  data.txns.forEach(node =>{\r\n    dataTable.add( node.receiver_account_id);\r\n  })\r\n  // dTable = dataTable;\r\n  const array = [];\r\n  dataTable.forEach(v => setDaTable(oldArray => [...oldArray, {id: v}]));\r\n  // setDaTable([...daTable,array]);\r\n  // console.log(daTable);\r\n  // dataTable.forEach(v => setDaTable([...daTable, {id: v}]))\r\n  // setDaTable(Array.from(dataTable));\r\n  // dataTable.forEach(dt => {\r\n  //   dTable.add(dt);\r\n\r\n  // })\r\n  setLoading(false)\r\n\r\n      });\r\n}\r\nconst handleSelect = (row) => {\r\n  setSelected(row);\r\n};\r\n\r\nconst handleClose = () => {\r\n    setAnchorEl(null);\r\n};\r\nfunction CustomToolbar() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      {/* <GridToolbarExport /> */}\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n    return { name, calories, fat, carbs, protein };\r\n  }\r\n  \r\n  \r\n  // dataTable['count']= dataTable.size;\r\n  return (\r\n    <MainCard title=\"Accounts\">\r\n         {/* <Grid container direction=\"column\">\r\n                        <Grid item>\r\n                            <Grid container justifyContent=\"space-between\">\r\n                                <Grid item>\r\n                                    <Avatar\r\n                                        variant=\"rounded\"\r\n                                        className={classes.avatarRight}\r\n                                        aria-controls=\"menu-earning-card\"\r\n                                        aria-haspopup=\"true\"\r\n                                        onClick={handleClick}\r\n                                    >\r\n                                        <MoreHorizIcon fontSize=\"inherit\" />\r\n                                    </Avatar>\r\n                                    <Menu\r\n                                        id=\"menu-earning-card\"\r\n                                        anchorEl={anchorEl}\r\n                                        keepMounted\r\n                                        open={Boolean(anchorEl)}\r\n                                        onClose={handleClose}\r\n                                        variant=\"selectedMenu\"\r\n                                        anchorOrigin={{\r\n                                            vertical: 'bottom',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                        transformOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right'\r\n                                        }}\r\n                                    >           \r\n                                        <MenuItem onClick={handleClose}>\r\n                                            <PictureAsPdfTwoToneIcon fontSize=\"inherit\" className={classes.menuItem} /> Export\r\n                                        </MenuItem>\r\n                                       \r\n                                    </Menu>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </Grid> */}\r\n                        <div style={{ height: 550, width: '100%' }}>\r\n                          {/* { !daTable ?  */}\r\n                          <DataGrid\r\n                              rows={daTable}\r\n                              columns={columns}\r\n                              pageSize={15}\r\n                              rowsPerPageOptions={[15]}\r\n                              // rowCount={totalCount}\r\n                              checkboxSelection\r\n                              loading={isLoading}\r\n                              // autoPageSize\r\n                              onSelectionModelChange={(newSelectionModel) => {\r\n                                handleSelection(newSelectionModel);\r\n                              }}\r\n                              selectionModel={selectionS}\r\n                              onPageChange={(e)=> {handlePageChange(e)}}\r\n                              paginationMode=\"server\"\r\n\r\n                              // page={pageModel}\r\n                              // components={{\r\n                              //   Toolbar: CustomToolbar,\r\n                              // }}\r\n                        /> \r\n                         {/* : \r\n                         <DataGrid\r\n                              rows={daTable}\r\n                              columns={columnsTwo}\r\n                              pageSize={20}\r\n                              rowsPerPageOptions={[20]}\r\n                              // components={{\r\n                              //   Toolbar: CustomToolbar,\r\n                              // }}\r\n                        /> \r\n                         }  */}\r\n                        </div>\r\n                        <Button component={Link} to=\"/transaction/details\" variant=\"contained\" endIcon={<SendIcon />} onClick={(event) => handleSubmit()}>\r\n  Search\r\n</Button>\r\n     {/* <TableContainer component={Paper}>\r\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>toID</TableCell>\r\n            <TableCell align=\"right\">Select</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.transfers.nodes.map((row,index) => {\r\n              const isItemSelected = isSelected(row.id);\r\n              const id = `enhanced-table-checkbox-${index}`;\r\n\r\n              return (\r\n            <TableRow\r\n              key={row.id}\r\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n            >\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.id}\r\n              </TableCell>\r\n              \r\n              <TableCell align=\"right\" padding=\"checkbox\"> \r\n              <Checkbox\r\n              onClick={(event) => handleClick(event, row.id)}\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            'aria-labelledby': id,\r\n                          }}\r\n                        /></TableCell>\r\n            </TableRow>)\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer> */}\r\n</MainCard>\r\n  );\r\n}\r\n\r\nAccountsPage.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(useStyles)(AccountsPage);"],"sourceRoot":""}